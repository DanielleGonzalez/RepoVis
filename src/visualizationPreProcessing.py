import sys
import codecs
import os 
import csv
from pathlib import Path

'''
visualizationPreProcessing
Author: Danielle Gonzalez dng2551@rit.edu

This program processes the CSV files generated by getRepoData to organize the data in a way that is easier to visualize.
The goal of RepoVis is to make project chatacteristics across releases (or tags if there are no releases)
Therefore, the data collected needs to be organized into release-based collections of data

Note: the code currently looks to see if there are releases. If there are, then data is organized by release
If there are no releases, it organizes by tags
THERE MAY BE MORE TAGS THAN RELEASES, so keep that in mind and change the code if you want to use both. 

Current Metadata Organized :
1. Issues
2. Pull Requests
Contributor's can't be organized by release (but we can count how many PRS or issues they open in a release!)

PROGRAM INPUT:
	1. the name of the repository (CSV files from previous step are labeled REPONAME-METADATA.csv, for example 'atom-contributors.csv')
	2. the root directory (relative to the location of this script) Example: ../data
		Note: default location to place files in previous step is in the /data folder, but I am requesting a path in case they were moved
		or placed in a subfolder. 

PROGRAM OUTPUT: 
	1. CSV file containing both the issues and pull requests sorted by release/tag (Date Opened)
	   such that an issue/PR is considered part of a release if it was opened AFTER the previous release/tag
	   
   	2. CSV file containing both the issues and pull requests sorted by release/tag (Date Closed)
   	   such that an issue/PR is considered part of a release if it was closed AFTER the previous release/tag
   
    3. CSV file containing the contributors who opened pull requests and issues sorted by release/tag 

'''
def organizeByReleases(releases):
	print("placeholder")

def organizeByTags(tags):
	print("placeholder")

def main():

	if(len(sys.argv) < 3):
		print("Please include the following arguments, in this order: ")
		print("Repository Name, Root Folder for CSV Files")
	else:
		# get input arguments
		repoName = sys.argv[1]
		dataPath = sys.argv[2]

		# get the CSV files and make sure they exists
		try:
			releasesCSV = Path(str(dataPath) + "/" + str(repoName) + "-releases.csv")
			tagsCSV = Path(str(dataPath) + "/" + str(repoName) + "-tags.csv").resolve()
			pullRequestCSV = Path(str(dataPath) + "/" + str(repoName) + "-pullrequests.csv").resolve()
			issuesCSV = Path(str(dataPath) + "/" + str(repoName) + "-issues.csv").resolve()
		except FileNotFoundError as f:
			print(f)

		# first step is to see if there are releases or tags
		releaseFile = open(releasesCSV) 
		releases = csv.DictReader(releaseFile)
		
		# if there aren't any releases then use tags
		if len(releases) == 0:
			print("No releases, looking for tags..")
			tagsFile = open(tagsCSV, newline='')
			tags = csv.DictReader(tagsFile)
			if len(tags) == 0:
				print("No Tags!")
			else:
				organizeByTags(tags)
		else:
			organizeByReleases(releases)
		
		tagsFile.close()
		releaseFile.close()

main()